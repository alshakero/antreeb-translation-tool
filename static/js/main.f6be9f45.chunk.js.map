{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","english","german","_useState2","Object","slicedToArray","translations","setTranslations","_useState3","_useState4","currentLang","setCurrentLang","react_default","a","createElement","className","component_default","checked","onChange","v","onClick","obj","string","JSON","stringify","document","download","href","URL","createObjectURL","Blob","type","click","es","id","colors","locale","height","placeholder","ev","objectSpread","defineProperty","jsObject","width","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTA8DeA,MApDf,WAAe,IAAAC,EAC2BC,mBAAS,CAAEC,UAASC,WAD/CC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GACNO,EADMH,EAAA,GACQI,EADRJ,EAAA,GAAAK,EAGyBR,mBAAS,UAHlCS,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGNE,EAHMD,EAAA,GAGOE,EAHPF,EAAA,GAgBb,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,8CAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,QAAyB,YAAhBP,EACTQ,SAAU,SAAAC,GAAC,OACTR,EAA+B,WAAhBD,EAA2B,UAAY,aAG1DE,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UAAQM,QA3BhB,WACE,IAAMC,EAAMf,EAAaI,GACnBY,EAASC,KAAKC,UAAUH,GACxBR,EAAIY,SAASX,cAAc,KACjCD,EAAEa,SAAWhB,EAAc,QAC3BG,EAAEc,KAAOC,IAAIC,gBACX,IAAIC,KAAK,CAACR,GAAS,CAAES,KAAM,sBAE7BlB,EAAEmB,UAmBI,aAEFpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACEC,GAAG,OACHC,OAAQ,CACNb,OAAQ,WAEVc,OAAQA,IACRC,OAAO,QACPC,YAAahC,EAAaI,GAC1BQ,SAAU,SAAAqB,GAAE,OACVhC,EAAgBH,OAAAoC,EAAA,EAAApC,CAAA,GAAKE,EAANF,OAAAqC,EAAA,EAAArC,CAAA,GAAqBM,EAAc6B,EAAGG,aAEvDC,MAAM,YC3CIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAAS1B,SAAS2B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f6be9f45.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport 'react-toggle/style.css'; // for ES6 modules\nimport ReactToggle from 'react-toggle';\nimport german from './locales/de_DE.json';\nimport english from './locales/en_US.json';\n\nfunction App() {\n  const [translations, setTranslations] = useState({ english, german });\n\n  const [currentLang, setCurrentLang] = useState('german');\n\n  function downloadJSON() {\n    const obj = translations[currentLang];\n    const string = JSON.stringify(obj);\n    const a = document.createElement('a');\n    a.download = currentLang + '.json';\n    a.href = URL.createObjectURL(\n      new Blob([string], { type: 'application/json' })\n    );\n    a.click();\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Antreeb Translation Tool âœ¨</h1>\n      </header>\n\n      <div className=\"sides\">\n        <div className=\"lang-toggle\">\n          <h4>German </h4>\n          <ReactToggle\n            checked={currentLang === 'english'}\n            onChange={v =>\n              setCurrentLang(currentLang === 'german' ? 'english' : 'german')\n            }\n          />\n          <h4>English </h4>\n          <button onClick={downloadJSON}>Download</button>\n        </div>\n        <JSONInput\n          id=\"left\"\n          colors={{\n            string: '#DAA520' // overrides theme colors with whatever color value you want\n          }}\n          locale={locale}\n          height=\"500vh\"\n          placeholder={translations[currentLang]}\n          onChange={ev =>\n            setTranslations({ ...translations, [currentLang]: ev.jsObject })\n          }\n          width=\"100%\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}